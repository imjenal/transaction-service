// Code generated by MockGen. DO NOT EDIT.
// Source: models/querier.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/imjenal/transaction-service/internal/db/models"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AccountExists mocks base method.
func (m *MockQuerier) AccountExists(ctx context.Context, uuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountExists", ctx, uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountExists indicates an expected call of AccountExists.
func (mr *MockQuerierMockRecorder) AccountExists(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountExists", reflect.TypeOf((*MockQuerier)(nil).AccountExists), ctx, uuid)
}

// CreateAccount mocks base method.
func (m *MockQuerier) CreateAccount(ctx context.Context, arg models.CreateAccountParams) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, arg)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockQuerierMockRecorder) CreateAccount(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockQuerier)(nil).CreateAccount), ctx, arg)
}

// CreateTransaction mocks base method.
func (m *MockQuerier) CreateTransaction(ctx context.Context, arg models.CreateTransactionParams) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, arg)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockQuerierMockRecorder) CreateTransaction(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockQuerier)(nil).CreateTransaction), ctx, arg)
}

// GetAccountDetailsByUUID mocks base method.
func (m *MockQuerier) GetAccountDetailsByUUID(ctx context.Context, uuid string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountDetailsByUUID", ctx, uuid)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountDetailsByUUID indicates an expected call of GetAccountDetailsByUUID.
func (mr *MockQuerierMockRecorder) GetAccountDetailsByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDetailsByUUID", reflect.TypeOf((*MockQuerier)(nil).GetAccountDetailsByUUID), ctx, uuid)
}

// GetOperationTypeAmountBehavior mocks base method.
func (m *MockQuerier) GetOperationTypeAmountBehavior(ctx context.Context, serialID int64) (models.AmountBehavior, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationTypeAmountBehavior", ctx, serialID)
	ret0, _ := ret[0].(models.AmountBehavior)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationTypeAmountBehavior indicates an expected call of GetOperationTypeAmountBehavior.
func (mr *MockQuerierMockRecorder) GetOperationTypeAmountBehavior(ctx, serialID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationTypeAmountBehavior", reflect.TypeOf((*MockQuerier)(nil).GetOperationTypeAmountBehavior), ctx, serialID)
}

// GetTransactionDetailsByTransactionId mocks base method.
func (m *MockQuerier) GetTransactionDetailsByTransactionId(ctx context.Context, uuid string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionDetailsByTransactionId", ctx, uuid)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionDetailsByTransactionId indicates an expected call of GetTransactionDetailsByTransactionId.
func (mr *MockQuerierMockRecorder) GetTransactionDetailsByTransactionId(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionDetailsByTransactionId", reflect.TypeOf((*MockQuerier)(nil).GetTransactionDetailsByTransactionId), ctx, uuid)
}

// UserExists mocks base method.
func (m *MockQuerier) UserExists(ctx context.Context, uuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", ctx, uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockQuerierMockRecorder) UserExists(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockQuerier)(nil).UserExists), ctx, uuid)
}
