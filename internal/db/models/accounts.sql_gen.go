// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: accounts.sql

package models

import (
	"context"
)

const accountExists = `-- name: AccountExists :one
SELECT EXISTS(SELECT 1 FROM public.accounts WHERE uuid = $1) AS exists
`

func (q *Queries) AccountExists(ctx context.Context, uuid string) (bool, error) {
	row := q.db.QueryRow(ctx, accountExists, uuid)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO public.accounts (document_number, current_balance, user_id)
VALUES ($1, $2, $3)
RETURNING uuid, serial_id, document_number, current_balance, user_id, created_at, updated_at
`

type CreateAccountParams struct {
	DocumentNumber string  `db:"document_number" json:"document_number"`
	CurrentBalance float64 `db:"current_balance" json:"current_balance"`
	UserID         string  `db:"user_id" json:"user_id"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (*Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.DocumentNumber, arg.CurrentBalance, arg.UserID)
	var i Account
	err := row.Scan(
		&i.Uuid,
		&i.SerialID,
		&i.DocumentNumber,
		&i.CurrentBalance,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAccountDetailsByUUID = `-- name: GetAccountDetailsByUUID :one
SELECT uuid, serial_id, document_number, current_balance, user_id, created_at, updated_at
FROM public.accounts
WHERE uuid = $1
`

func (q *Queries) GetAccountDetailsByUUID(ctx context.Context, uuid string) (*Account, error) {
	row := q.db.QueryRow(ctx, getAccountDetailsByUUID, uuid)
	var i Account
	err := row.Scan(
		&i.Uuid,
		&i.SerialID,
		&i.DocumentNumber,
		&i.CurrentBalance,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
