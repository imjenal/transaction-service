// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: transactions.sql

package models

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO public.transactions (account_id, amount, operation_type_id, event_date)
VALUES ($1, $2, $3, NOW())
RETURNING uuid, serial_id, account_id, amount, operation_type_id, event_date, updated_at
`

type CreateTransactionParams struct {
	AccountID       string  `db:"account_id" json:"account_id"`
	Amount          float64 `db:"amount" json:"amount"`
	OperationTypeID int64   `db:"operation_type_id" json:"operation_type_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (*Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction, arg.AccountID, arg.Amount, arg.OperationTypeID)
	var i Transaction
	err := row.Scan(
		&i.Uuid,
		&i.SerialID,
		&i.AccountID,
		&i.Amount,
		&i.OperationTypeID,
		&i.EventDate,
		&i.UpdatedAt,
	)
	return &i, err
}

const getTransactionDetailsByTransactionId = `-- name: GetTransactionDetailsByTransactionId :one
SELECT uuid, serial_id, account_id, amount, operation_type_id, event_date, updated_at
FROM public.transactions
WHERE uuid = $1
`

func (q *Queries) GetTransactionDetailsByTransactionId(ctx context.Context, uuid string) (*Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionDetailsByTransactionId, uuid)
	var i Transaction
	err := row.Scan(
		&i.Uuid,
		&i.SerialID,
		&i.AccountID,
		&i.Amount,
		&i.OperationTypeID,
		&i.EventDate,
		&i.UpdatedAt,
	)
	return &i, err
}
