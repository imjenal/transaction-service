// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package models

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type AmountBehavior string

const (
	AmountBehaviorPOSITIVE AmountBehavior = "POSITIVE"
	AmountBehaviorNEGATIVE AmountBehavior = "NEGATIVE"
)

func (e *AmountBehavior) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AmountBehavior(s)
	case string:
		*e = AmountBehavior(s)
	default:
		return fmt.Errorf("unsupported scan type for AmountBehavior: %T", src)
	}
	return nil
}

type NullAmountBehavior struct {
	AmountBehavior AmountBehavior
	Valid          bool // Valid is true if AmountBehavior is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAmountBehavior) Scan(value interface{}) error {
	if value == nil {
		ns.AmountBehavior, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AmountBehavior.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAmountBehavior) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.AmountBehavior, nil
}

type TransactionType string

const (
	TransactionTypeNORMALPURCHASE           TransactionType = "NORMAL_PURCHASE"
	TransactionTypeWITHDRAWAL               TransactionType = "WITHDRAWAL"
	TransactionTypeCREDITVOUCHER            TransactionType = "CREDIT_VOUCHER"
	TransactionTypePURCHASEWITHINSTALLMENTS TransactionType = "PURCHASE_WITH_INSTALLMENTS"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType
	Valid           bool // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.TransactionType, nil
}

type Account struct {
	Uuid           string    `db:"uuid" json:"uuid"`
	SerialID       int64     `db:"serial_id" json:"serial_id"`
	DocumentNumber string    `db:"document_number" json:"document_number"`
	CurrentBalance float64   `db:"current_balance" json:"current_balance"`
	UserID         string    `db:"user_id" json:"user_id"`
	CreatedAt      time.Time `db:"created_at" json:"created_at"`
	UpdatedAt      time.Time `db:"updated_at" json:"updated_at"`
}

type OperationType struct {
	Uuid           string          `db:"uuid" json:"uuid"`
	SerialID       int64           `db:"serial_id" json:"serial_id"`
	Description    TransactionType `db:"description" json:"description"`
	AmountBehavior AmountBehavior  `db:"amount_behavior" json:"amount_behavior"`
	CreatedAt      time.Time       `db:"created_at" json:"created_at"`
	UpdatedAt      time.Time       `db:"updated_at" json:"updated_at"`
}

type Transaction struct {
	Uuid            string    `db:"uuid" json:"uuid"`
	SerialID        int64     `db:"serial_id" json:"serial_id"`
	AccountID       string    `db:"account_id" json:"account_id"`
	Amount          float64   `db:"amount" json:"amount"`
	OperationTypeID int64     `db:"operation_type_id" json:"operation_type_id"`
	EventDate       time.Time `db:"event_date" json:"event_date"`
	UpdatedAt       time.Time `db:"updated_at" json:"updated_at"`
}

type User struct {
	Uuid        string         `db:"uuid" json:"uuid"`
	SerialID    int64          `db:"serial_id" json:"serial_id"`
	FirstName   sql.NullString `db:"first_name" json:"first_name"`
	MiddleName  sql.NullString `db:"middle_name" json:"middle_name"`
	LastName    sql.NullString `db:"last_name" json:"last_name"`
	PhoneNumber string         `db:"phone_number" json:"phone_number"`
	Email       sql.NullString `db:"email" json:"email"`
	CreatedAt   time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time      `db:"updated_at" json:"updated_at"`
}
